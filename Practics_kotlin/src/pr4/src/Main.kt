fun t1_var2() {
    println("üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É! üéØ")
    println("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã–±—Ä–∞–≤ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞\n")

    val questions = listOf(
        Triple("–°—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?", listOf("1. –õ–æ–Ω–¥–æ–Ω", "2. –ü–∞—Ä–∏–∂", "3. –ë–µ—Ä–ª–∏–Ω", "4. –ú–∞–¥—Ä–∏–¥"), 2),
        Triple("–°–∞–º–∞—è –±–æ–ª—å—à–∞—è –ø–ª–∞–Ω–µ—Ç–∞?", listOf("1. –ó–µ–º–ª—è", "2. –ú–∞—Ä—Å", "3. –Æ–ø–∏—Ç–µ—Ä", "4. –°–∞—Ç—É—Ä–Ω"), 3),
        Triple("–ê–≤—Ç–æ—Ä '–í–æ–π–Ω–∞ –∏ –º–∏—Ä'?", listOf("1. –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π", "2. –ü—É—à–∫–∏–Ω", "3. –¢–æ–ª—Å—Ç–æ–π", "4. –ß–µ—Ö–æ–≤"), 3)
    )

    var correctAnswers = 0

    //–ª–æ–≥–∞–ª—å–Ω —Ñ—É–Ω–∫
    fun check_correct(userAnswer: Int, correctAnswer: Int) {
        if (userAnswer == correctAnswer) {
            println("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n")
            correctAnswers++
        } else {
            println("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: $correctAnswer\n")
        }
    }

    for ((index, questionData) in questions.withIndex()) {
        val (question, options, correctAnswer) = questionData
        println("–í–æ–ø—Ä–æ—Å ${index + 1}: $question")
        options.forEach { println(it) }
        print("\n–í–∞—à –æ—Ç–≤–µ—Ç (–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä): ")
        val userAnswer = readln().toInt()
        check_correct(userAnswer, correctAnswer)
    }

    println("–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
    println("–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: $correctAnswers –∏–∑ ${questions.size}")
}


fun t2(){
    val words = arrayOf("the", "day", "is", "sunny", "the", "the", "the", "sunny", "is", "is", "day")
    println("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ k: ")
    var k = readln().toInt()


    while (k <= 0) {
        println("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!")
        k = readln().toInt()
    }

    //–æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω —Ñ—É–Ω–∫
    fun check_count() = words.groupingBy { it }.eachCount()


    val wordCounts = check_count()
    println("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: $wordCounts")


    fun printReversed() {
        wordCounts.entries
            .sortedByDescending { it.value }
            .take(k)
            .forEach {println("${it.key}: ${it.value}")
            }
    }

    println("\n$k –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏—Ö—Å—è —Å–ª–æ–≤:")
    printReversed()
}


fun main() {
    t1_var2()
    t2()
}